var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
import similarity from "compute-cosine-similarity";
import * as fs from "fs";
import { z } from "genkit";
import { genkitPlugin } from "genkit/plugin";
import {
  CommonRetrieverOptionsSchema,
  Document,
  indexerRef,
  retrieverRef
} from "genkit/retriever";
import { Md5 } from "ts-md5";
const _LOCAL_FILESTORE = "__db_{INDEX_NAME}.json";
function loadFilestore(indexName) {
  let existingData = {};
  const indexFileName = _LOCAL_FILESTORE.replace("{INDEX_NAME}", indexName);
  if (fs.existsSync(indexFileName)) {
    existingData = JSON.parse(fs.readFileSync(indexFileName).toString());
  }
  return existingData;
}
function addDocument(doc, contents, embedding) {
  const id = Md5.hashStr(JSON.stringify(doc));
  if (!(id in contents)) {
    contents[id] = { doc, embedding };
  } else {
    console.debug(`Skipping ${id} since it is already present`);
  }
}
function devLocalVectorstore(params) {
  return genkitPlugin("devLocalVectorstore", (ai) => __async(this, null, function* () {
    params.map((p) => configureDevLocalRetriever(ai, p));
    params.map((p) => configureDevLocalIndexer(ai, p));
  }));
}
var src_default = devLocalVectorstore;
function devLocalRetrieverRef(indexName) {
  return retrieverRef({
    name: `devLocalVectorstore/${indexName}`,
    info: {
      label: `Local file-based Retriever - ${indexName}`
    },
    configSchema: CommonRetrieverOptionsSchema.optional()
  });
}
function devLocalIndexerRef(indexName) {
  return indexerRef({
    name: `devLocalVectorstore/${indexName}`,
    info: {
      label: `Local file-based Indexer - ${indexName}`
    },
    configSchema: z.null().optional()
  });
}
function importDocumentsToLocalVectorstore(ai, params) {
  return __async(this, null, function* () {
    const { docs, embedder, embedderOptions } = __spreadValues({}, params);
    const data = loadFilestore(params.indexName);
    yield Promise.all(
      docs.map((doc) => __async(this, null, function* () {
        const embedding = yield ai.embed({
          embedder,
          content: doc,
          options: embedderOptions
        });
        addDocument(doc, data, embedding);
      }))
    );
    fs.writeFileSync(
      _LOCAL_FILESTORE.replace("{INDEX_NAME}", params.indexName),
      JSON.stringify(data)
    );
  });
}
function getClosestDocuments(params) {
  return __async(this, null, function* () {
    var _a;
    const scoredDocs = [];
    for (const [, value] of Object.entries(params.db)) {
      const thisEmbedding = value.embedding;
      const score = (_a = similarity(params.queryEmbeddings, thisEmbedding)) != null ? _a : 0;
      scoredDocs.push({
        score,
        doc: new Document(value.doc)
      });
    }
    scoredDocs.sort((a, b) => a.score > b.score ? -1 : 1);
    return scoredDocs.slice(0, params.k).map((o) => o.doc);
  });
}
function configureDevLocalRetriever(ai, params) {
  const { embedder, embedderOptions } = params;
  const vectorstore = ai.defineRetriever(
    {
      name: `devLocalVectorstore/${params.indexName}`,
      configSchema: CommonRetrieverOptionsSchema
    },
    (content, options) => __async(this, null, function* () {
      var _a;
      const db = loadFilestore(params.indexName);
      const embedding = yield ai.embed({
        embedder,
        content,
        options: embedderOptions
      });
      return {
        documents: yield getClosestDocuments({
          k: (_a = options == null ? void 0 : options.k) != null ? _a : 3,
          queryEmbeddings: embedding,
          db
        })
      };
    })
  );
  return vectorstore;
}
function configureDevLocalIndexer(ai, params) {
  const { embedder, embedderOptions } = params;
  const vectorstore = ai.defineIndexer(
    { name: `devLocalVectorstore/${params.indexName}` },
    (docs) => __async(this, null, function* () {
      yield importDocumentsToLocalVectorstore(ai, {
        indexName: params.indexName,
        docs,
        embedder,
        embedderOptions
      });
    })
  );
  return vectorstore;
}
export {
  configureDevLocalIndexer,
  configureDevLocalRetriever,
  src_default as default,
  devLocalIndexerRef,
  devLocalRetrieverRef,
  devLocalVectorstore
};
//# sourceMappingURL=index.mjs.map