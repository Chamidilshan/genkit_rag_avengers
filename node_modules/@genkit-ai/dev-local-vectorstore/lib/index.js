"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var src_exports = {};
__export(src_exports, {
  configureDevLocalIndexer: () => configureDevLocalIndexer,
  configureDevLocalRetriever: () => configureDevLocalRetriever,
  default: () => src_default,
  devLocalIndexerRef: () => devLocalIndexerRef,
  devLocalRetrieverRef: () => devLocalRetrieverRef,
  devLocalVectorstore: () => devLocalVectorstore
});
module.exports = __toCommonJS(src_exports);
var import_compute_cosine_similarity = __toESM(require("compute-cosine-similarity"));
var fs = __toESM(require("fs"));
var import_genkit = require("genkit");
var import_plugin = require("genkit/plugin");
var import_retriever = require("genkit/retriever");
var import_ts_md5 = require("ts-md5");
const _LOCAL_FILESTORE = "__db_{INDEX_NAME}.json";
function loadFilestore(indexName) {
  let existingData = {};
  const indexFileName = _LOCAL_FILESTORE.replace("{INDEX_NAME}", indexName);
  if (fs.existsSync(indexFileName)) {
    existingData = JSON.parse(fs.readFileSync(indexFileName).toString());
  }
  return existingData;
}
function addDocument(doc, contents, embedding) {
  const id = import_ts_md5.Md5.hashStr(JSON.stringify(doc));
  if (!(id in contents)) {
    contents[id] = { doc, embedding };
  } else {
    console.debug(`Skipping ${id} since it is already present`);
  }
}
function devLocalVectorstore(params) {
  return (0, import_plugin.genkitPlugin)("devLocalVectorstore", (ai) => __async(this, null, function* () {
    params.map((p) => configureDevLocalRetriever(ai, p));
    params.map((p) => configureDevLocalIndexer(ai, p));
  }));
}
var src_default = devLocalVectorstore;
function devLocalRetrieverRef(indexName) {
  return (0, import_retriever.retrieverRef)({
    name: `devLocalVectorstore/${indexName}`,
    info: {
      label: `Local file-based Retriever - ${indexName}`
    },
    configSchema: import_retriever.CommonRetrieverOptionsSchema.optional()
  });
}
function devLocalIndexerRef(indexName) {
  return (0, import_retriever.indexerRef)({
    name: `devLocalVectorstore/${indexName}`,
    info: {
      label: `Local file-based Indexer - ${indexName}`
    },
    configSchema: import_genkit.z.null().optional()
  });
}
function importDocumentsToLocalVectorstore(ai, params) {
  return __async(this, null, function* () {
    const { docs, embedder, embedderOptions } = __spreadValues({}, params);
    const data = loadFilestore(params.indexName);
    yield Promise.all(
      docs.map((doc) => __async(this, null, function* () {
        const embedding = yield ai.embed({
          embedder,
          content: doc,
          options: embedderOptions
        });
        addDocument(doc, data, embedding);
      }))
    );
    fs.writeFileSync(
      _LOCAL_FILESTORE.replace("{INDEX_NAME}", params.indexName),
      JSON.stringify(data)
    );
  });
}
function getClosestDocuments(params) {
  return __async(this, null, function* () {
    var _a;
    const scoredDocs = [];
    for (const [, value] of Object.entries(params.db)) {
      const thisEmbedding = value.embedding;
      const score = (_a = (0, import_compute_cosine_similarity.default)(params.queryEmbeddings, thisEmbedding)) != null ? _a : 0;
      scoredDocs.push({
        score,
        doc: new import_retriever.Document(value.doc)
      });
    }
    scoredDocs.sort((a, b) => a.score > b.score ? -1 : 1);
    return scoredDocs.slice(0, params.k).map((o) => o.doc);
  });
}
function configureDevLocalRetriever(ai, params) {
  const { embedder, embedderOptions } = params;
  const vectorstore = ai.defineRetriever(
    {
      name: `devLocalVectorstore/${params.indexName}`,
      configSchema: import_retriever.CommonRetrieverOptionsSchema
    },
    (content, options) => __async(this, null, function* () {
      var _a;
      const db = loadFilestore(params.indexName);
      const embedding = yield ai.embed({
        embedder,
        content,
        options: embedderOptions
      });
      return {
        documents: yield getClosestDocuments({
          k: (_a = options == null ? void 0 : options.k) != null ? _a : 3,
          queryEmbeddings: embedding,
          db
        })
      };
    })
  );
  return vectorstore;
}
function configureDevLocalIndexer(ai, params) {
  const { embedder, embedderOptions } = params;
  const vectorstore = ai.defineIndexer(
    { name: `devLocalVectorstore/${params.indexName}` },
    (docs) => __async(this, null, function* () {
      yield importDocumentsToLocalVectorstore(ai, {
        indexName: params.indexName,
        docs,
        embedder,
        embedderOptions
      });
    })
  );
  return vectorstore;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  configureDevLocalIndexer,
  configureDevLocalRetriever,
  devLocalIndexerRef,
  devLocalRetrieverRef,
  devLocalVectorstore
});
//# sourceMappingURL=index.js.map