{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport similarity from 'compute-cosine-similarity';\nimport * as fs from 'fs';\nimport { Genkit, z } from 'genkit';\nimport { EmbedderArgument } from 'genkit/embedder';\nimport { GenkitPlugin, genkitPlugin } from 'genkit/plugin';\nimport {\n  CommonRetrieverOptionsSchema,\n  Document,\n  DocumentData,\n  indexerRef,\n  retrieverRef,\n} from 'genkit/retriever';\nimport { Md5 } from 'ts-md5';\n\nconst _LOCAL_FILESTORE = '__db_{INDEX_NAME}.json';\n\ninterface DbValue {\n  doc: DocumentData;\n  embedding: Array<number>;\n}\n\nfunction loadFilestore(indexName: string) {\n  let existingData = {};\n  const indexFileName = _LOCAL_FILESTORE.replace('{INDEX_NAME}', indexName);\n  if (fs.existsSync(indexFileName)) {\n    existingData = JSON.parse(fs.readFileSync(indexFileName).toString());\n  }\n  return existingData;\n}\n\nfunction addDocument(\n  doc: Document,\n  contents: Record<string, DbValue>,\n  embedding: Array<number>\n) {\n  const id = Md5.hashStr(JSON.stringify(doc));\n  if (!(id in contents)) {\n    // Only inlcude if doc is new\n    contents[id] = { doc, embedding };\n  } else {\n    console.debug(`Skipping ${id} since it is already present`);\n  }\n}\n\ninterface Params<EmbedderCustomOptions extends z.ZodTypeAny> {\n  indexName: string;\n  embedder: EmbedderArgument<EmbedderCustomOptions>;\n  embedderOptions?: z.infer<EmbedderCustomOptions>;\n}\n\n/**\n * Local file-based vectorstore plugin that provides retriever and indexer.\n *\n * NOT INTENDED FOR USE IN PRODUCTION\n */\nexport function devLocalVectorstore<EmbedderCustomOptions extends z.ZodTypeAny>(\n  params: Params<EmbedderCustomOptions>[]\n): GenkitPlugin {\n  return genkitPlugin('devLocalVectorstore', async (ai) => {\n    params.map((p) => configureDevLocalRetriever(ai, p));\n    params.map((p) => configureDevLocalIndexer(ai, p));\n  });\n}\n\nexport default devLocalVectorstore;\n\n/**\n * Local file-based vectorstore retriever reference\n */\nexport function devLocalRetrieverRef(indexName: string) {\n  return retrieverRef({\n    name: `devLocalVectorstore/${indexName}`,\n    info: {\n      label: `Local file-based Retriever - ${indexName}`,\n    },\n    configSchema: CommonRetrieverOptionsSchema.optional(),\n  });\n}\n\n/**\n * Local file-based indexer reference\n */\nexport function devLocalIndexerRef(indexName: string) {\n  return indexerRef({\n    name: `devLocalVectorstore/${indexName}`,\n    info: {\n      label: `Local file-based Indexer - ${indexName}`,\n    },\n    configSchema: z.null().optional(),\n  });\n}\n\nasync function importDocumentsToLocalVectorstore<\n  EmbedderCustomOptions extends z.ZodTypeAny,\n>(\n  ai: Genkit,\n  params: {\n    indexName: string;\n    docs: Array<Document>;\n    embedder: EmbedderArgument<EmbedderCustomOptions>;\n    embedderOptions?: z.infer<EmbedderCustomOptions>;\n  }\n) {\n  const { docs, embedder, embedderOptions } = { ...params };\n  const data = loadFilestore(params.indexName);\n\n  await Promise.all(\n    docs.map(async (doc) => {\n      const embedding = await ai.embed({\n        embedder,\n        content: doc,\n        options: embedderOptions,\n      });\n      addDocument(doc, data, embedding);\n    })\n  );\n\n  // Update the file\n  fs.writeFileSync(\n    _LOCAL_FILESTORE.replace('{INDEX_NAME}', params.indexName),\n    JSON.stringify(data)\n  );\n}\n\nasync function getClosestDocuments<\n  I extends z.ZodTypeAny,\n  EmbedderCustomOptions extends z.ZodTypeAny,\n>(params: {\n  queryEmbeddings: Array<number>;\n  db: Record<string, DbValue>;\n  k: number;\n}): Promise<Document[]> {\n  const scoredDocs: { score: number; doc: Document }[] = [];\n  // Very dumb way to check for similar docs.\n  for (const [, value] of Object.entries(params.db)) {\n    const thisEmbedding = value.embedding;\n    const score = similarity(params.queryEmbeddings, thisEmbedding) ?? 0;\n    scoredDocs.push({\n      score,\n      doc: new Document(value.doc),\n    });\n  }\n\n  scoredDocs.sort((a, b) => (a.score > b.score ? -1 : 1));\n  return scoredDocs.slice(0, params.k).map((o) => o.doc);\n}\n\n/**\n * Configures a local vectorstore retriever\n */\nexport function configureDevLocalRetriever<\n  EmbedderCustomOptions extends z.ZodTypeAny,\n>(\n  ai: Genkit,\n  params: {\n    indexName: string;\n    embedder: EmbedderArgument<EmbedderCustomOptions>;\n    embedderOptions?: z.infer<EmbedderCustomOptions>;\n  }\n) {\n  const { embedder, embedderOptions } = params;\n  const vectorstore = ai.defineRetriever(\n    {\n      name: `devLocalVectorstore/${params.indexName}`,\n      configSchema: CommonRetrieverOptionsSchema,\n    },\n    async (content, options) => {\n      const db = loadFilestore(params.indexName);\n\n      const embedding = await ai.embed({\n        embedder,\n        content,\n        options: embedderOptions,\n      });\n      return {\n        documents: await getClosestDocuments({\n          k: options?.k ?? 3,\n          queryEmbeddings: embedding,\n          db,\n        }),\n      };\n    }\n  );\n  return vectorstore;\n}\n\n/**\n * Configures a local vectorstore indexer.\n */\nexport function configureDevLocalIndexer<\n  EmbedderCustomOptions extends z.ZodTypeAny,\n>(\n  ai: Genkit,\n  params: {\n    indexName: string;\n    embedder: EmbedderArgument<EmbedderCustomOptions>;\n    embedderOptions?: z.infer<EmbedderCustomOptions>;\n  }\n) {\n  const { embedder, embedderOptions } = params;\n  const vectorstore = ai.defineIndexer(\n    { name: `devLocalVectorstore/${params.indexName}` },\n    async (docs) => {\n      await importDocumentsToLocalVectorstore(ai, {\n        indexName: params.indexName,\n        docs,\n        embedder,\n        embedderOptions: embedderOptions,\n      });\n    }\n  );\n  return vectorstore;\n}\n"],"mappings":"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","names":[]}